@page "/search"
@inject HttpClient Http
@using Bank.Wasm.QuickGrid.Shared;
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>QuickGrid - Search</PageTitle>

<div class="w3-container w3-content" style="max-width:1400px;margin-top:80px">
    <div class="w3-container w3-card w3-white w3-round w3-margin"><br>
        <div class="w3-bar w3-light-grey w3-border">
            <nav aria-label="Breadcrumb" class="breadcrumb w3-bar-item w3-padding" >
                <ol>
                    <li>
                        <a href="#">Home</a>
                    </li>
                    <li>
                        <a href="#">Accounts</a>
                    </li>
                    <li>
                        <a href="#" aria-current="page">Checking</a>
                    </li>
                </ol>
            </nav>
            <div class="w3-right">
                <span class="w3-bar-item">@DateTime.Now.ToString("D")</span>
            </div>
        </div>

        <div class="w3-row">
            <div class="w3-col s6">
                <h3>Checking Account</h3>
            </div>
            <div class="w3-col s6">
                <h3 class="w3-right">Available Balance:&nbsp;<strong>$4,217.48</strong></h3>
            </div>
        </div>

        <div class="w3-bar w3-light-grey w3-border w3-padding">
            <span class="w3-bar-item w3-left">
                <strong>Items per page:</strong>
                <select @bind="@pagination.ItemsPerPage">
                    <option>3</option>
                    <option>5</option>
                    <option>10</option>
                    <option>15</option>
                </select>
            </span>                
            <span class="w3-bar-item w3-mobile"><strong>Filter:</strong></span>
                <button class="w3-button w3-bar-item w3-border w3-mobile w3-light-grey" @onclick="() => UpdateDateFilter(Ranges.None)">
                    <i class="fa fa-calendar" aria-hidden="true"></i>&nbsp;All
                </button>
                <button class="w3-button w3-bar-item w3-border w3-mobile w3-light-grey" @onclick="() => UpdateDateFilter(Ranges.Month)">
                    <i class="fa fa-calendar-plus-o" aria-hidden="true"></i>&nbsp;Current
                </button>
                <button class="w3-button w3-bar-item w3-border w3-mobile w3-light-grey" @onclick="() => UpdateDateFilter(Ranges.Previous)">
                    <i class="fa fa-calendar-minus-o" aria-hidden="true"></i>&nbsp;Previous
                </button>
            <span class="w3-bar-item w3-mobile"><strong>Data:</strong></span>
            <a href="#" class="w3-bar-item w3-button w3-border w3-mobile w3-light-grey"><i class="fa fa-download"></i>&nbsp;Download</a>                
            <a href="#" class="w3-bar-item w3-button w3-border w3-mobile w3-light-grey"><i class="fa fa-print"></i>&nbsp;Print</a>
            <div class="w3-right">
                <input type="text" class="w3-bar-item w3-input w3-white w3-mobile w3-border" autofocus @bind="nameFilter" placeholder="search transactions...">
                <button class="w3-bar-item w3-button w3-blue w3-mobile w3-border">Search</button>
            </div>
        </div>

        <div class="grid" tabindex="-1">
            <QuickGrid Items="@FilteredTransactions" Pagination="@pagination">
                <PropertyColumn Property="@(tx => tx.Id)" Title="ID" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending" />
                <PropertyColumn Property="@(tx => tx.Date)" Title="Date" Format="MMM-dd" Sortable="true"/>
                <PropertyColumn Title="Description" Property="@(tx => tx.Description)" Sortable="true">
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Description name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(tx => tx.Type)" Title="Type" Sortable="true" />        
                <PropertyColumn Property="@(tx => tx.Amount)" Title="Amount" Format="C2" Align="Align.Right"/>
                <PropertyColumn Property="@(tx => tx.Balance)" Title="Balance" Format="C2" Align="Align.Right" />
                <TemplateColumn Title="Actions" Align="Align.Center">
                    <button @onclick="@(() => ViewTx(context))">View</button>
                </TemplateColumn>
            </QuickGrid>
        </div>

        <Paginator State="@pagination"></Paginator>

        <div class="w3-container">
            <p class="w3-large">
                <strong>@message</strong>
            </p>
        </div>
    </div>
</div>

@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Transaction>? transactions;
    Ranges dateFilter = 0;
    string nameFilter = string.Empty;
    string searchFilter = string.Empty;
    string message = string.Empty;
    int numResults;

    IQueryable<Transaction>? FilteredTransactions
    {
        get
        {
            if (dateFilter == Ranges.Month)
            {
                return transactions?.Where(tx => tx.Date.Month == DateTime.Today.Month);
            }
            else if (dateFilter == Ranges.Previous)
            {
                return transactions?.Where(tx => tx.Date.Month == DateTime.Today.AddMonths(-1).Month);
            }
            else
            {
                return transactions?.Where(tx => tx.Description.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }
        }
    }

    public record Transaction(uint Id, decimal Amount, decimal Balance, DateOnly Date, string Description, TransactionType Type);

    protected override async Task OnInitializedAsync()
    {
        List<Transaction>? txList = await Get();
        transactions = txList?.AsQueryable();
    }

    public async Task<List<Transaction>?> Get()
    {
        List<Transaction>? tx = null;

        HttpResponseMessage response = await Http.GetAsync("bankaccount");
        if (response.IsSuccessStatusCode)
        {
            tx = await response.Content.ReadFromJsonAsync<List<Transaction>>();
        }
        return tx;
    }

    void ViewTx(Transaction tx) => message = $"You selected record {tx.Id}.";

    private void UpdateDateFilter(Ranges range)
    {
        dateFilter = range;
    }

    enum Ranges : ushort
    {
        None = 0,
        Month = 1,
        Previous = 2        
    }
}